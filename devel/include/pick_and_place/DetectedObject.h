// Generated by gencpp from file pick_and_place/DetectedObject.msg
// DO NOT EDIT!


#ifndef PICK_AND_PLACE_MESSAGE_DETECTEDOBJECT_H
#define PICK_AND_PLACE_MESSAGE_DETECTEDOBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pick_and_place
{
template <class ContainerAllocator>
struct DetectedObject_
{
  typedef DetectedObject_<ContainerAllocator> Type;

  DetectedObject_()
    : x_world(0.0)
    , y_world(0.0)
    , z_world(0.0)
    , width(0.0)
    , length(0.0)
    , height(0.0)
    , color()  {
    }
  DetectedObject_(const ContainerAllocator& _alloc)
    : x_world(0.0)
    , y_world(0.0)
    , z_world(0.0)
    , width(0.0)
    , length(0.0)
    , height(0.0)
    , color(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_world_type;
  _x_world_type x_world;

   typedef double _y_world_type;
  _y_world_type y_world;

   typedef double _z_world_type;
  _z_world_type z_world;

   typedef double _width_type;
  _width_type width;

   typedef double _length_type;
  _length_type length;

   typedef double _height_type;
  _height_type height;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _color_type;
  _color_type color;





  typedef boost::shared_ptr< ::pick_and_place::DetectedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pick_and_place::DetectedObject_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObject_

typedef ::pick_and_place::DetectedObject_<std::allocator<void> > DetectedObject;

typedef boost::shared_ptr< ::pick_and_place::DetectedObject > DetectedObjectPtr;
typedef boost::shared_ptr< ::pick_and_place::DetectedObject const> DetectedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pick_and_place::DetectedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pick_and_place::DetectedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pick_and_place::DetectedObject_<ContainerAllocator1> & lhs, const ::pick_and_place::DetectedObject_<ContainerAllocator2> & rhs)
{
  return lhs.x_world == rhs.x_world &&
    lhs.y_world == rhs.y_world &&
    lhs.z_world == rhs.z_world &&
    lhs.width == rhs.width &&
    lhs.length == rhs.length &&
    lhs.height == rhs.height &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pick_and_place::DetectedObject_<ContainerAllocator1> & lhs, const ::pick_and_place::DetectedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pick_and_place

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pick_and_place::DetectedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pick_and_place::DetectedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pick_and_place::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pick_and_place::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pick_and_place::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pick_and_place::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pick_and_place::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "167a85e1fd80883aabe7acad7edd6a85";
  }

  static const char* value(const ::pick_and_place::DetectedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x167a85e1fd80883aULL;
  static const uint64_t static_value2 = 0xabe7acad7edd6a85ULL;
};

template<class ContainerAllocator>
struct DataType< ::pick_and_place::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pick_and_place/DetectedObject";
  }

  static const char* value(const ::pick_and_place::DetectedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pick_and_place::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_world\n"
"float64 y_world\n"
"float64 z_world\n"
"float64 width\n"
"float64 length\n"
"float64 height\n"
"string color\n"
;
  }

  static const char* value(const ::pick_and_place::DetectedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pick_and_place::DetectedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_world);
      stream.next(m.y_world);
      stream.next(m.z_world);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.height);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pick_and_place::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pick_and_place::DetectedObject_<ContainerAllocator>& v)
  {
    s << indent << "x_world: ";
    Printer<double>::stream(s, indent + "  ", v.x_world);
    s << indent << "y_world: ";
    Printer<double>::stream(s, indent + "  ", v.y_world);
    s << indent << "z_world: ";
    Printer<double>::stream(s, indent + "  ", v.z_world);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PICK_AND_PLACE_MESSAGE_DETECTEDOBJECT_H
